// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebWarehouseDB.Data;

namespace WebWarehouseDB.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    partial class WarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebWarehouseDB.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INT")
                        .HasColumnName("Customer_ID");

                    b.Property<string>("Address")
                        .HasColumnType("STRING");

                    b.Property<int>("ConsumedProduct1Id")
                        .HasColumnType("INT")
                        .HasColumnName("Consumed_Product_1_ID");

                    b.Property<int>("ConsumedProduct2Id")
                        .HasColumnType("INT")
                        .HasColumnName("Consumed_Product_2_ID");

                    b.Property<int>("ConsumedProduct3Id")
                        .HasColumnType("INT")
                        .HasColumnName("Consumed_Product_3_ID");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("STRING")
                        .HasColumnName("Phone_Number");

                    b.HasKey("CustomerId");

                    b.HasIndex("ConsumedProduct1Id");

                    b.HasIndex("ConsumedProduct2Id");

                    b.HasIndex("ConsumedProduct3Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INT")
                        .HasColumnName("Employee_ID");

                    b.Property<string>("Address")
                        .HasColumnType("STRING");

                    b.Property<string>("Age")
                        .HasColumnType("STRING");

                    b.Property<string>("FullName")
                        .HasColumnType("STRING")
                        .HasColumnName("Full_Name");

                    b.Property<string>("PassportInformation")
                        .HasColumnType("STRING")
                        .HasColumnName("Passport_Information");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("STRING")
                        .HasColumnName("Phone_Number");

                    b.Property<int>("PositionId")
                        .HasColumnType("INT")
                        .HasColumnName("Position_ID");

                    b.Property<string>("Sex")
                        .HasColumnType("STRING");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("INT")
                        .HasColumnName("Position_ID");

                    b.Property<string>("Duties")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.Property<string>("Requests")
                        .HasColumnType("STRING");

                    b.Property<int>("Salary")
                        .HasColumnType("INT");

                    b.HasKey("PositionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.Property<string>("Package")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("ShelfLife")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Shelf_Life");

                    b.Property<string>("StorageConditions")
                        .HasColumnType("STRING")
                        .HasColumnName("Storage_Conditions");

                    b.Property<int>("TypeId")
                        .HasColumnType("INT")
                        .HasColumnName("Type_ID");

                    b.HasKey("ProductId");

                    b.HasIndex("TypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.ProductType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("INT")
                        .HasColumnName("Type_ID");

                    b.Property<string>("Description")
                        .HasColumnType("STRING");

                    b.Property<string>("Feature")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.HasKey("TypeId");

                    b.ToTable("Product_Type");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("INT")
                        .HasColumnName("Provider_ID");

                    b.Property<string>("Address")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("STRING")
                        .HasColumnName("Phone_Number");

                    b.Property<int>("SuppliedProduct1Id")
                        .HasColumnType("INT")
                        .HasColumnName("Supplied_Product_1_ID");

                    b.Property<int>("SuppliedProduct2Id")
                        .HasColumnType("INT")
                        .HasColumnName("Supplied_Product_2_ID");

                    b.Property<int>("SuppliedProduct3Id")
                        .HasColumnType("INT")
                        .HasColumnName("Supplied_Product_3_ID");

                    b.HasKey("ProviderId");

                    b.HasIndex("SuppliedProduct1Id");

                    b.HasIndex("SuppliedProduct2Id");

                    b.HasIndex("SuppliedProduct3Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("INT")
                        .HasColumnName("Warehouse_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INT")
                        .HasColumnName("Customer_ID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INT")
                        .HasColumnName("Employee_ID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Order_Date");

                    b.Property<int>("Price")
                        .HasColumnType("INT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INT")
                        .HasColumnName("Product_ID");

                    b.Property<int>("ProviderId")
                        .HasColumnType("INT")
                        .HasColumnName("Provider_ID");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Shipment_Date");

                    b.Property<DateTime>("SupplyDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Supply_Date");

                    b.Property<string>("TypeOfDelivery")
                        .HasColumnType("STRING")
                        .HasColumnName("Type_of_Delivery");

                    b.Property<int>("Volume")
                        .HasColumnType("INT");

                    b.HasKey("WarehouseId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Customer", b =>
                {
                    b.HasOne("WebWarehouseDB.Models.Product", "ConsumedProduct1")
                        .WithMany("CustomerConsumedProduct1s")
                        .HasForeignKey("ConsumedProduct1Id")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Product", "ConsumedProduct2")
                        .WithMany("CustomerConsumedProduct2s")
                        .HasForeignKey("ConsumedProduct2Id")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Product", "ConsumedProduct3")
                        .WithMany("CustomerConsumedProduct3s")
                        .HasForeignKey("ConsumedProduct3Id")
                        .IsRequired();

                    b.Navigation("ConsumedProduct1");

                    b.Navigation("ConsumedProduct2");

                    b.Navigation("ConsumedProduct3");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Employee", b =>
                {
                    b.HasOne("WebWarehouseDB.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Product", b =>
                {
                    b.HasOne("WebWarehouseDB.Models.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Provider", b =>
                {
                    b.HasOne("WebWarehouseDB.Models.Product", "SuppliedProduct1")
                        .WithMany("ProviderSuppliedProduct1s")
                        .HasForeignKey("SuppliedProduct1Id")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Product", "SuppliedProduct2")
                        .WithMany("ProviderSuppliedProduct2s")
                        .HasForeignKey("SuppliedProduct2Id")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Product", "SuppliedProduct3")
                        .WithMany("ProviderSuppliedProduct3s")
                        .HasForeignKey("SuppliedProduct3Id")
                        .IsRequired();

                    b.Navigation("SuppliedProduct1");

                    b.Navigation("SuppliedProduct2");

                    b.Navigation("SuppliedProduct3");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Warehouse", b =>
                {
                    b.HasOne("WebWarehouseDB.Models.Customer", "Customer")
                        .WithMany("Warehouses")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Employee", "Employee")
                        .WithMany("Warehouses")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Product", "Product")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("WebWarehouseDB.Models.Provider", "Provider")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProviderId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Customer", b =>
                {
                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Employee", b =>
                {
                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Product", b =>
                {
                    b.Navigation("CustomerConsumedProduct1s");

                    b.Navigation("CustomerConsumedProduct2s");

                    b.Navigation("CustomerConsumedProduct3s");

                    b.Navigation("ProviderSuppliedProduct1s");

                    b.Navigation("ProviderSuppliedProduct2s");

                    b.Navigation("ProviderSuppliedProduct3s");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebWarehouseDB.Models.Provider", b =>
                {
                    b.Navigation("Warehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
